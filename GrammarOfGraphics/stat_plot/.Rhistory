filter(Sepal.Length < 6) %a%
lm(Petal.Length~Species, data=.) %a%
summary() -> tmp
ahistory(tmp)
loadFromGithubRepo("92ada1", repo="graphGallery", user="pbiecek",
value=TRUE)
obj2rm <- searchInLocalRepo(tag = list("2010-01-01", "2015-01-01"),
repoDir = repo)
searchInLocalRepo
?searchInLocalRepo
obj2rm <- searchInLocalRepo(list("2010-01-01", "2015-01-01"),
repoDir = repo)
repo
repo = "new_repo/"
obj2rm <- searchInLocalRepo(list("2010-01-01", "2015-01-01"),
repoDir = repo)
obj2rm
obj2rm <- searchInLocalRepo(list("2010-01-01", "2016-01-01"),
repoDir = repo)
obj2rm
Sys.Date()-1
Sys.Date()
Sys.Date()-30
searchInLocalRepo(list(dateFrom = "2010-01-01", dateTo = Sys.Date()-30),
repoDir = repo)
citation("digest")
citation("knitr")
citation("Sweave")
library(Sweave)
citation("shiny")
citation("gridExtra")
citation("dplyr")
citation("magrittr")
citation("ggplot2")
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
y <- rnorm(100)
g <- factor(floor(runif(100,3)))
df <- data.frame(y, g)
df
?runif
g <- factor(floor(runif(100,0,3)))
df <- data.frame(y, g)
df
ggplot(df, aes(y, colour = g)) +
stat_ecdf()
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
pl <- ggplot(df, aes(y, colour = g)) + stat_boxplot()
pl
pl <- ggplot(df, aes(y=y, x=g, colour = g)) + stat_boxplot()
pl
pl <- ggplot(df, aes(y=y, x=g, colour = g)) + stat_boxplot() + coord_flip()
pl
pl + geom_linerange(x=1, ymin=0, ymax=1)
pl <- ggplot(df, aes(y=y, x=g, colour = g)) + stat_boxplot() + coord_flip()
pl + geom_linerange(x=1, ymin=0, ymax=1)
pl + geom_vline(x=1)
pl + geom_hline(x=1)
pl + geom_hline(intercept=1)
pl + geom_hline(xintercept=1)
pl + geom_hline(yintercept=1)
pl <- ggplot(df, aes(y, colour = g)) + stat_density()
pl
pl <- ggplot(df, aes(y, fill = g)) + stat_density()
pl
pl <- ggplot(df, aes(y, fill = g)) + stat_density(alpha=0.5)
pl
pl <- ggplot(df, aes(y, fill = g)) + stat_density(alpha=0.8)
pl
pl + geom_vline(xintercept=position$x)
pl + geom_vline(xintercept=1)
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
pl <- ggplot(df, aes(y, fill = g)) + geom_histogram(alpha=0.8)
pl
pl <- ggplot(df, aes(y, fill = g)) + geom_histogram(alpha=0.8, binwidth=1)
pl
library(dplyr)
head(df)
df %>%
group_by(g) %>%
summarise(ecdf(y)(1))
position = list(x=1)
df %>%
group_by(g) %>%
summarise(ecdf = ecdf(y)(position$x))
df %>%
group_by(g) %>%
summarise(ecdf = ecdf(y)(position$x)) %>%
mutate(y = position$x)
pl <- ggplot(df, aes(y, colour = g)) + stat_ecdf()
df2 <- df %>%
group_by(g) %>%
summarise(ecdf = ecdf(y)(position$x)) %>%
mutate(y = position$x)
pl <- pl + geom_vline(xintercept=position$x) +
geom_point(data=df2, aes(x=y, y=ecdf, color=g), size=3)
pl
pl <- pl + geom_vline(xintercept=position$x) +
geom_point(data=df2, aes(x=y, y=ecdf, color=g), size=5)
pl
pl <- pl + geom_vline(xintercept=position$x) +
geom_point(data=df2, aes(x=y, y=ecdf, color=g), size=5) +
geom_text(data=df2, aes(x=y, y=ecdf, color=g, label=g))
pl
pl <- ggplot(df, aes(y, colour = g)) + stat_ecdf()
pl + geom_vline(xintercept=position$x) +
geom_point(data=df2, aes(x=y, y=ecdf, color=g), size=5) +
geom_text(data=df2, aes(x=y, y=ecdf, color=g, label=g))
pl + geom_text(data=df2, aes(x=y, y=ecdf, color=g, label=g))
pl <- pl + geom_vline(xintercept=position$x) +
geom_point(data=df2, aes(x=y, y=ecdf, color=g), size=5) +
geom_text(data=df2, aes(x=y, y=ecdf, color=g, label=g), hjust=0, vjust=0)
pl
pl <- pl + geom_vline(xintercept=position$x) +
geom_point(data=df2, aes(x=y, y=ecdf, color=g), size=5) +
geom_text(data=df2, aes(x=y, y=ecdf,  label=g), hjust=0, vjust=0)
pl
pl <- pl + geom_vline(xintercept=position$x) +
geom_point(data=df2, aes(x=y, y=ecdf, color=g), size=5) +
geom_text(data=df2, aes(x=y, y=ecdf,label=g), color="black",hjust=0, vjust=0)
pl + theme_bw()
pl <- ggplot(df, aes(y, colour = g)) + stat_ecdf()
df2 <- df %>%
group_by(g) %>%
summarise(ecdf = ecdf(y)(position$x)) %>%
mutate(y = position$x)
pl <- pl + geom_vline(xintercept=position$x) +
geom_point(data=df2, aes(x=y, y=ecdf, color=g), size=5) +
geom_text(data=df2, aes(x=y, y=ecdf,label=paste("grupa", g)), color="black",hjust=0, vjust=0)
pl + theme_bw()
pl <- ggplot(df, aes(y, colour = g)) + stat_ecdf()
df2 <- df %>%
group_by(g) %>%
summarise(ecdf = ecdf(y)(position$x)) %>%
mutate(y = position$x)
pl <- pl + geom_vline(xintercept=position$x) +
geom_point(data=df2, aes(x=y, y=ecdf, color=g), size=5) +
geom_text(data=df2, aes(x=y, y=ecdf,label=paste0("grupa ", g, ": ", signif(100*ecdf,2))), color="black",hjust=0, vjust=0)
pl + theme_bw()
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
pl <- ggplot(df, aes(y, colour = g)) + stat_ecdf()
df2 <- df %>%
group_by(g) %>%
summarise(ecdf2 = ecdf(y)(position$x)) %>%
mutate(y = position$x)
pl <- pl + geom_vline(xintercept=position$x) +
geom_point(data=df2, aes(x=y, y=ecdf2, color=g), size=5) +
geom_text(data=df2, aes(x=y, y=ecdf2,label=paste0("grupa ", g, ": ", signif(100*ecdf2,2), "%")), color="black",hjust=0, vjust=0)
}
pl + theme_bw()
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
g <- factor(rep(c(1:3),200))
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
g <- factor(rep(c(1:3),200))
head(g)
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
pl <- ggplot(df, aes(y, fill = g)) + geom_histogram(alpha=0.8, binwidth=1)
pl
pl <- ggplot(df, aes(y, fill = g)) + geom_histogram(alpha=0.8, binwidth=1, position = "dodge")
pl
pl <- ggplot(df, aes(y, fill = g)) + geom_density(alpha=0.8, binwidth=1)
pl
pl <- ggplot(df, aes(y, fill = g)) + geom_density(alpha=0.8, binwidth=.2)
pl
pl <- ggplot(df, aes(y, fill = g)) + geom_density(alpha=0.8, span=.2)
pl
pl <- ggplot(df, aes(y, fill = g)) + geom_density(alpha=0.8, smoth=.2)
pl
pl <- ggplot(df, aes(y, fill = g)) + geom_density(alpha=0.8, adjust=.2)
pl
pl <- ggplot(df, aes(y, fill = g)) + geom_density(alpha=0.8, adjust=.5)
pl
pl <- ggplot(df, aes(y)) + geom_histogram(alpha=0.8, binwidth=1, position = "dodge")
pl
pl <- ggplot(df, aes(y)) + geom_histogram(alpha=0.8, binwidth=.5, position = "dodge")
pl
stat_bin(20)
stat_bin(data=df, aes(y))
stat_bin(data=df, aes(y))(2)
head(df)
df %>%
mutate(y2 = cut(y, seq(-5,5,0.5)))
df %>%
mutate(y2 = cut(y, seq(-5,5,0.5))) %>%
group_by(y2) %>%
summarise(pdf2 = n())
df2 <- df %>%
mutate(y2 = cut(y, seq(-5,5,0.5))) %>%
group_by(y2) %>%
summarise(pdf2 = n())
pl <- ggplot(df2, aes(x=y2, y=pdf2)) + geom_bar(stat="identity")
pl
?theme_bw
?theme
pl + theme_bw(axis.text.x=theme_text(angle=-90))
pl + theme(axis.text.x=theme_text(angle=-90))
pl + theme(axis.text.x=element_text(angle=-90))
pl <- pl + geom_vline(xintercept=position$x)
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
df2
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
>tabPanel
?tabPanel
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
setwd("GitHub/archivist/")
library(devtools)
build()
check()
document()
check()
build()
setwd("../..")
!require(archivist)
archivist::aread("pbiecek/graphGallery/2166dfbd3a7a68a91a2f8e6df1a44111")
models <- asearch("pbiecek/graphGallery", patterns = c("class:lm", "coefname:Sepal.Length"))
lapply(models, coef)
plots <- asearch("pbiecek/graphGallery",
patterns = c("class:gg",
"labelx:Sepal.Length"))
library("gridExtra")
do.call(grid.arrange,  plots)
createEmptyRepo("tmp_archivist", default = TRUE)
iris %a%
filter(Sepal.Length < 6) %a%
lm(Petal.Length~Species, data=.) %a%
summary() -> tmp
repo <- "new_repo"
createEmptyRepo(repoDir = repo)
copyGithubRepo( repoTo = repo, md5hashes= "2166dfbd3a7a68a91a2f8e6df1a44111",
user="pbiecek", repo="graphGallery" )
?curlPerform
?CURLOptions
??CURLOptions
??pam
??pem
curlSetOpt(cainfo = "/Users/pbiecek/cacert.pem")
library(RCurl)
curlSetOpt(cainfo = "/Users/pbiecek/cacert.pem")
curl = getCurlHandle()
curl
library(rvest)
strona <- html("http://www.sejm.gov.pl/Sejm7.nsf/posel.xsp?id=001&type=A")
html_nodes(strona, "#biura")
html_nodes(strona, "#biura") -> wezly
html_attr(wwezly)
html_attr(wezly)
html_attr(wezly, "href")
library(testowy)
?Yourclass
x <- rnorm(5)
y <- rnorm(5) + 1
t.test(x, y)$p.value
wilcox.test(x, y)$p.value
pp <- replicate(1000, {
x <- rnorm(5)
y <- rnorm(5) + 1
c(t.test(x, y)$p.value,
wilcox.test(x, y)$p.value)
)
x <- rnorm(5)
y <- rnorm(5) + 1
c(t.test(x, y)$p.value,
wilcox.test(x, y)$p.value)
pp <- replicate(1000, {
x <- rnorm(5)
y <- rnorm(5) + 1
c(t.test(x, y)$p.value,
wilcox.test(x, y)$p.value)
})
dim(pp)
dim(t(pp) < 0.05)
colMeans(t(pp) < 0.05)
pp <- replicate(1000, {
x <- rnorm(5)
y <- rnorm(5) + 1.5
c(t.test(x, y)$p.value,
wilcox.test(x, y)$p.value)
})
colMeans(t(pp) < 0.05)
pp <- replicate(5000, {
x <- rnorm(5)
y <- rnorm(5) + 1.5
c(t.test(x, y)$p.value,
wilcox.test(x, y)$p.value)
})
colMeans(t(pp) < 0.05)
pp <- replicate(5000, {
x <- rnorm(5, 0, 1)
y <- rnorm(5, 1,5, 4)
c(t.test(x, y)$p.value,
wilcox.test(x, y)$p.value)
})
colMeans(t(pp) < 0.05)
pp <- replicate(5000, {
x <- rnorm(5, 0, 1)
y <- rnorm(5, 1.5, 4)
c(t.test(x, y)$p.value,
wilcox.test(x, y)$p.value)
})
colMeans(t(pp) < 0.05)
pp <- replicate(5000, {
x <- rnorm(50, 0, 1)
y <- rnorm(50, 1, 4)
c(t.test(x, y)$p.value,
wilcox.test(x, y)$p.value)
})
colMeans(t(pp) < 0.05)
pp <- replicate(5000, {
x <- rnorm(50, 0, 1)
y <- rnorm(50, 1, 9)
c(t.test(x, y)$p.value,
wilcox.test(x, y)$p.value)
})
colMeans(t(pp) < 0.05)
pp <- replicate(5000, {
x <- rnorm(50, 0, 1)
y <- rnorm(50, 3, 9)
c(t.test(x, y)$p.value,
wilcox.test(x, y)$p.value)
})
colMeans(t(pp) < 0.05)
pp <- replicate(5000, {
x <- rnorm(50, 0, 1)
y <- rnorm(50, 4, 9)
c(t.test(x, y)$p.value,
wilcox.test(x, y)$p.value)
})
colMeans(t(pp) < 0.05)
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
shiny::runApp('GitHub/BetaBit_opowiadania/_Gra_rozklady_')
library(RPostgreSQL)
?dbConnect()
?dbConnect
??RPostgreSQL
drv <- dbDriver("PostgreSQL")
dbConnect(drv, user="SejmRP", password="x56jK99ZwQp")
mpolaczenie = dbConnect(sterownik,
user='pbiecek', password=haslo, dbname='students',
host='services.mini.pw.edu.pl')
polaczenie = dbConnect(drv,
user='pbiecek', password=haslo, dbname='students',
host='services.mini.pw.edu.pl')
polaczenie = dbConnect(drv,
user='SejmRP', password='x56jK99ZwQp', dbname='SejmRP',
host='services.mini.pw.edu.pl')
polaczenie = dbConnect(drv,
user='SejmRP', password='x56jK99ZwQp', dbname='SejmRP',
host='services.mini.pw.edu.pl')
polaczenie = dbConnect(drv,
user='sejmrp', password='x56jK99ZwQp', dbname='sejmrp',
host='services.mini.pw.edu.pl')
polaczenie = dbConnect(drv,
user='postgres', password='x56jK99ZwQp', dbname='sejmrp',
host='services.mini.pw.edu.pl')
polaczenie = dbConnect(drv,
user='sejmrp', password='x56jK99ZwQp', dbname='sejmrp',
host='services.mini.pw.edu.pl')
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
polaczenie = dbConnect(drv,
user='sejmrp', password='x56jK99ZwQp', dbname='sejmrp',
host='mi2.mini.pw.edu.pl')
polaczenie = dbConnect(drv,
user='sejmrp', password='x56jK99ZwQp', dbname='sejmrp',
host='services.mini.pw.edu.pl')
polaczenie = dbConnect(drv,
user='sejmrp', password='x56jK99ZwQp', dbname='sejmrp',
host='services.mini.pw.edu.pl')
dbListTables(polaczenie)
dbGetQuery(polaczenie, "select * from deputies limit 10")
dbGetQuery(polaczenie, "select * from deputies limit 10")[2,2]
Encoding(dbGetQuery(polaczenie, "select * from deputies limit 10")[2,2])
?dbGetQuery
dbGetQuery(con, "SHOW CLIENT_ENCODING");
dbGetQuery(polaczenie, "SHOW CLIENT_ENCODING");
postgresqlpqExec(con, "SET client_encoding = 'windows-1252'");
postgresqlpqExec(polaczenie, "SET client_encoding = 'windows-1252'");
library(dplyr)
summary(iris$Sepal.Length)
iris %>%
mutate(gr = cut(Sepal.Length, seq(4,8,0.5)))
iris %>%
mutate(gr = cut(Sepal.Length, seq(4,8,0.5))) %>%
group_by(gr) %>%
summarise(min = min(Petal.Length),
max = max(Petal.Length))
library(dplyr)
library(ggplot2)
ggplot(df, aes(x=gr, ymin=min, ymax=max)) +
geom_linerange()
df <- iris %>%
mutate(gr = cut(Sepal.Length, seq(4,8,0.5))) %>%
group_by(gr) %>%
summarise(min = min(Petal.Length),
max = max(Petal.Length))
ggplot(df, aes(x=gr, ymin=min, ymax=max)) +
geom_linerange()
ggplot(df, aes(x=gr, ymin=min, ymax=max)) +
geom_linerange() + theme_bw()
setwd("~/GitHub/Eseje/GrammarOfGraphics/stat_plot")
ggsave("stats_range.png", pl1, width = 7, height = 7)
pl1 <- ggplot(df, aes(x=gr, ymin=min, ymax=max)) +
geom_linerange() + theme_bw()
ggsave("stats_range.png", pl1, width = 7, height = 7)
library(tidyr)
head)df
head(pos)
df %>%
gather(min_max, valee, min, max)
df2 <- df %>%
gather(min_max, value, min, max)
pl2 <- ggplot(df, aes(x=gr, y=min_max)) +
geom_point() + theme_bw()
ggsave("stats_point.png", pl2, width = 7, height = 7)
pl2 <- ggplot(df2, aes(x=gr, y=min_max)) +
geom_point() + theme_bw()
ggsave("stats_point.png", pl2, width = 7, height = 7)
ggplot(df2, aes(x=gr, y=min_max)) +
geom_point() + theme_bw()
ggplot(df2, aes(x=gr, y=value)) +
geom_point() + theme_bw()
pl2 <- ggplot(df2, aes(x=gr, y=value)) +
geom_point() + theme_bw()
ggsave("stats_point.png", pl2, width = 7, height = 7)
ggplot(df2, aes(x=gr, y=value, group=min_max)) +
geom_line() + theme_bw()
pl3 <- ggplot(df2, aes(x=gr, y=value, group=min_max)) +
geom_line() + theme_bw()
ggsave("stats_line.png", pl3, width = 7, height = 7)
ggplot(df2, aes(x=gr, y=value, group=min_max)) +
geom_line() +
geom_point() +
geom_linerange(data=df, aes(x=gr, ymin=min, ymax=max)) +
theme_bw()
ggplot(df2, aes(x=gr, y=value, group=min_max)) +
geom_line() +
geom_point() +
geom_linerange(data=df, aes(x=gr, ymin=min, ymax=max, y=max)) +
theme_bw()
ggplot(df2, aes(x=gr, y=value, group=min_max)) +
geom_line() +
geom_point() +
geom_linerange(data=df, aes(x=gr, ymin=min, ymax=max, y=max, group=1)) +
theme_bw()
ggplot(df2, aes(x=gr, y=value, group=min_max)) +
geom_line(color="red") +
geom_point(color="blue") +
geom_linerange(data=df, aes(x=gr, ymin=min, ymax=max, y=max, group=1)) +
theme_bw()
ggplot(df2, aes(x=gr, y=value, group=min_max)) +
geom_line(color="red") +
geom_point(color="blue", size=5) +
geom_linerange(data=df, aes(x=gr, ymin=min, ymax=max, y=max, group=1), color="grey") +
theme_bw()
pl4 <- ggplot(df2, aes(x=gr, y=value, group=min_max)) +
geom_line(color="red") +
geom_linerange(data=df, aes(x=gr, ymin=min, ymax=max, y=max, group=1), color="grey") +
geom_point(color="blue", size=5) +
theme_bw()
ggsave("stats_all.png", pl4, width = 7, height = 7)
install.packages("HistogramTools")
library(HistogramTools)
x <- runif(1000, min=0, max=100)
h <- hist(x, breaks=0:100, plot=FALSE)
plot(h, freq=FALSE)
lines(HistToASH(h), col="red")
?HistToASH
example(HistToASH)
?HistToASH
example()
example(
histogramtools-package)
example("histogramtools-package")
install.packages("RProtoBuf")
example("histogramtools-package")
?PlotKSDCC
x <- rexp(1000)
h <- hist(x, breaks=c(0,1,2,3,4,8,16,32), plot=FALSE)
KSDCC(h)
?ash
??ash
x <- rnorm(100)         # data
f <- ash1(bin1(x,nbin=50),5) # compute ash estimate
plot( f , type="l" )    # line plot of estimate
library(ash)
x <- rnorm(100)         # data
f <- ash1(bin1(x,nbin=50),5) # compute ash estimate
plot( f , type="l" )    # line plot of estimate
install_github("mi2-warsaw/sejmRP")
library(dev)
library(devtools)
install_github("mi2-warsaw/sejmRP")
install_github("mi2-warsaw/sejmRP/sejmRP")
